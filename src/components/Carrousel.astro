---
interface Props {
	id: string
	images: string[]
	title: string
}

const { id, images, title } = Astro.props
---

<div class='relative overflow-hidden carrousel' id={id}>
	<picture class='flex overflow-x-auto snap-x snap-mandatory container_scroll' data-id={id}>
		{
			images.map((x) => (
				<img src={x} alt={title} class='w-full h-48 rounded object-cover snap-center' />
			))
		}
	</picture>
	<div class='absolute bottom-5 left-1/2 -translate-x-1/2 flex gap-1' id='indicators'>
		{
			Object.keys(images).length === 1
				? null
				: Object.keys(images).map((n) => (
						<button
							type='button'
							class={`w-3 h-3 rounded-full buttons transition-all duration-500 ${
								n === '0' ? 'bg-highlight' : 'bg-indicator'
							}`}
							data-id={id}
							data-slide-to={n}
						/>
				  ))
		}
	</div>
</div>

<script>
	const buttons = document.querySelectorAll('.buttons') as NodeListOf<HTMLButtonElement>
	const pictures = document.querySelectorAll('.carrousel picture') as NodeListOf<HTMLPictureElement>

	pictures.forEach((x) => {
		x.addEventListener('scroll', (e) => {
			const target = e.target as HTMLPictureElement
			const proxi = Math.round(target.scrollLeft / target.offsetWidth)
			const id = target.dataset.id as string
			const indicators = document.querySelectorAll(`#${id} #indicators > *`)

			indicators.forEach((x, idx) => {
				if (idx == proxi) {
					x.classList.add('bg-highlight')
					x.classList.remove('bg-indicator')
				} else {
					x.classList.remove('bg-highlight')
					x.classList.add('bg-indicator')
				}
			})
		})
	})

	buttons.forEach((x) => {
		x.addEventListener('click', function () {
			const id = this.dataset.id as string
			const btnActive = document.querySelector(`#${id} button.bg-highlight`) as HTMLButtonElement

			btnActive.classList.remove('bg-highlight')
			btnActive.classList.add('bg-indicator')

			this.classList.add('bg-highlight')
			this.classList.remove('bg-indicator')

			const picture = document.querySelector(`#${id} picture`) as HTMLPictureElement
			const mg =
				Math.round(picture.scrollWidth / picture.childElementCount) *
				parseInt(this.dataset.slideTo as string)

			picture.scrollTo({
				top: 0,
				left: mg,
				behavior: 'smooth'
			})
		})
	})
</script>

<style>
	.container_scroll::-webkit-scrollbar {
		overflow: hidden;
	}
</style>
